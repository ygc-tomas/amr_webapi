Technical Design Document for PLC Integration (C Implementation)
1. Overview
This document provides guidance for engineers developing the PLC component in C for integrating HMI inputs, server communication, and AMR control. 

2. System Architecture
・HMI (Human-Machine Interface):
    Operators input task commands (e.g., start task from point A to B, stop task, or initiate charging).

・PLC (Programmable Logic Controller) – C Implementation:
    Receives commands from the HMI.
    Inserts tasks into the task_list database.
    Monitors AMR status (battery level, workStatus, abnormalStatus) by querying either the AMR API or a status database.
    Decides when to start (resume) or stop (pause) the AMR based on predefined conditions.
    Communicates with the server (via DB updates or API calls) for executing AMR instructions.

・Server (PHP + DB + WebAPI):
    Continuously monitors task_list for pending tasks.
    Uses the MissionWorks API to send instructions (start, pause, resume, charge) to the AMR.
    Updates task statuses based on API responses and AMR callback messages.

・AMR (Autonomous Mobile Robot):
    Executes tasks (e.g., pickup at point A and drop-off at point B).
    Provides status data (battery_value, workStatus, abnormalStatus, etc.) via its API.
    Responds to commands such as start/resume, pause/stop, or charge.

3. Integration Flow
3.1 Task Registration and Execution
<Task Addition>
HMI: Operator inputs a task (e.g., move from point A to B).
PLC: Receives input and inserts a new record into the task_list database with mission_id.

<Task Initiation>
Server: Monitors task_list for pending tasks and, upon detection, calls the MissionWorks API to start the task.
API Response: Returns a runtime ID, and the server updates the task status to RUNNING.
PLC: Starts periodic monitoring of AMR status while the task is running.

3.2 AMR Start/Stop Conditions
The PLC monitors the following AMR status parameters to determine the appropriate action:

<Start/Resume Conditions>
    <Normal Operation>
    workStatus equals 1 (indicating the AMR is idle/ready).
    abnormalStatus equals 1 (indicating no abnormalities).
    Battery level is above a low threshold (e.g., > 10%).
    <Action>
    If all conditions are met, the PLC (or server) issues a resumeTask command via the API.

<Stop/Pause Conditions>
    <Low Battery>
    Battery level is at or below 10%.
    Action: Issue a pauseTask command to prevent operation and start charging.
    Abnormal State:
    abnormalStatus is not 1.
    <Action> 
    Issue a pauseTask command and optionally trigger recovery procedures (e.g., using oneKeyReset API).

<Task Completion>
    When a successful callback (“Success”) is received, the task is marked as completed.
    If the battery remains low (≤ 50%), the system enters a charging promotion mode before returning to idle.

3.3 Charging Control
<Charging Initiation>
When battery level falls to 10% or below, the system pauses the task and transitions to a charging state.

<Charging Resumption>
Once the battery level reaches the charge threshold (e.g., ≥ 30%), a resumeTask command is sent to continue task execution.

4. PLC Side Implementation in C
Below are sample C code snippets illustrating key functions for integration. These include HMI input processing, task registration, AMR status monitoring, and condition-based AMR control.

4.1 HMI Input and Task Registration (Operator sends task to PLC from HMI and register DB)
----------C#--------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <mysql/mysql.h>

#define DB_HOST "192.168.51.51"
#define DB_USER "plc_user"
#define DB_PASS "plc_password"
#define DB_NAME "amr_task_db"

// Structure representing a task
typedef struct {
    char mission_id[20];
    char source[10];
    char destination[10];
    int status; // 0: PENDING, 1: RUNNING, 2: PAUSED, 3: COMPLETED
} Mission;

// Insert task into the database
int add_task_to_db(Mission *task) {
    MYSQL *conn = mysql_init(NULL);
    if (!mysql_real_connect(conn, DB_HOST, DB_USER, DB_PASS, DB_NAME, 0, NULL, 0)) {
        printf("DB Connection Error: %s\n", mysql_error(conn));
        return -1;
    }
    char query[256];
    sprintf(query, "INSERT INTO task_list (mission_id, status, source_point, destination_point, created_at) "
                   "VALUES ('%s', %d, '%s', '%s', NOW())",
                   task->mission_id, task->status, task->source, task->destination);
    if (mysql_query(conn, query)) {
        printf("DB Insert Error: %s\n", mysql_error(conn));
        mysql_close(conn);
        return -1;
    }
    mysql_close(conn);
    printf("Task Added: %s\n", task->mission_id);
    return 0;
}
ｄ
// Receive HMI input and register a new task
void receive_hmi_input() {
    Mission task;
    printf("Enter Mission ID: ");
    scanf("%s", task.mission_id);
    printf("Enter Source Point: ");
    scanf("%s", task.source);
    printf("Enter Destination Point: ");
    scanf("%s", task.destination);
    task.status = 0; // Set as PENDING
    add_task_to_db(&task);
}

int main() {
    while (1) {
        printf("Waiting for HMI Input...\n");
        receive_hmi_input();
        sleep(5); // Poll every 5 seconds
    }
    return 0;
}
----------C#--------------

4.2 AMR Status Monitoring and Conditional AMR Control (Operator send control command to AMR on HMI)
----------C#--------------#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <mysql/mysql.h>

// Function to check AMR status from the database (or directly via API)
void check_amr_status() {
    MYSQL *conn = mysql_init(NULL);
    if (!mysql_real_connect(conn, DB_HOST, DB_USER, DB_PASS, DB_NAME, 0, NULL, 0)) {
        printf("DB Connection Error: %s\n", mysql_error(conn));
        return;
    }
    if (mysql_query(conn, "SELECT battery_value, workStatus, abnormalStatus FROM amr_status ORDER BY updated_at DESC LIMIT 1")) {
        printf("DB Query Error: %s\n", mysql_error(conn));
        mysql_close(conn);
        return;
    }
    MYSQL_RES *res = mysql_store_result(conn);
    MYSQL_ROW row = mysql_fetch_row(res);
    if (row) {
        int battery = atoi(row[0]);
        int workStatus = atoi(row[1]);
        int abnormalStatus = atoi(row[2]);

        printf("Battery: %d%%, WorkStatus: %d, AbnormalStatus: %d\n", battery, workStatus, abnormalStatus);

        // Conditions for AMR control:
        if (battery <= 10) {
            printf("Battery is critically low. Issuing pause command and initiating charging.\n");
            // Call external command/script for charging if needed
            system("python3 send_charge_request.py");
        } else if (workStatus == 1 && abnormalStatus == 1) {
            // Normal conditions: AMR can be commanded to start/resume
            printf("AMR is ready. Sending resume command.\n");
            system("curl -X POST http://192.168.51.51:8080/api/v3/missionWorks/<runtimeId>/controls/resume");
        } else if (abnormalStatus != 1) {
            // Abnormal condition detected: send pause and recovery command
            printf("AMR abnormal detected. Sending pause command and initiating recovery.\n");
            system("curl -X POST http://192.168.51.51:8080/api/v3/missionWorks/<runtimeId>/controls/pause");
            system("curl -X POST http://192.168.51.51:8080/api/v3/vehicles/task/oneKeyReset");
        }
    }
    mysql_free_result(res);
    mysql_close(conn);
}

int main() {
    while (1) {
        printf("Monitoring AMR Status...\n");
        check_amr_status();
        sleep(10); // Monitor every 10 seconds
    }
    return 0;
}
----------C#--------------

4.3 Task Stop Handling (Update Task Status to PAUSED)
----------C#--------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <mysql/mysql.h>

void pause_task(const char *mission_id) {
    MYSQL *conn = mysql_init(NULL);
    if (!mysql_real_connect(conn, DB_HOST, DB_USER, DB_PASS, DB_NAME, 0, NULL, 0)) {
        printf("DB Connection Error: %s\n", mysql_error(conn));
        return;
    }
    char query[128];
    sprintf(query, "UPDATE task_list SET status = 'PAUSED' WHERE mission_id = '%s'", mission_id);
    if (mysql_query(conn, query)) {
        printf("DB Update Error: %s\n", mysql_error(conn));
    } else {
        printf("Task %s Paused\n", mission_id);
    }
    mysql_close(conn);
}

int main() {
    char mission_id[20];
    printf("Enter Mission ID to Pause: ");
    scanf("%s", mission_id);
    pause_task(mission_id);
    return 0;
}
----------C#--------------


5. Communication Using Modbus
The PLC communicates with both the HMI and the server using the Modbus protocol. The system uses Modbus TCP/IP between the PLC and the server, while Modbus RTU can be used between the PLC and HMI.

Register	Function	Description	Range
40001	Task Command	0=Idle, 1=Start, 2=Pause, 3=Charge	0-3
40002	Mission ID	Task identifier	0-65535
40003	Source Point	Pickup location	0-255
40004	Destination Point	Drop-off location	0-255
40005	Task Status	0=PENDING, 1=RUNNING, 2=PAUSED, 3=COMPLETED	0-3
40006	Battery Level	AMR battery percentage	0-100
40007	AMR Work Status	1=Idle, 2=Running, 3=Charging	1-3
40008	AMR Abnormal Status	0=Normal, 1=Error	0-1

6. Task Execution and Control Flow
6.1 Task Registration
HMI Input:

Operator enters a task (e.g., move from A to B).
Task command (40001 = 1), mission ID, and destination details are written to the Modbus registers.
PLC Processing:

The PLC detects a new task command (40001 = 1) and logs the task in the task_list database.
The PLC updates the Modbus register (40005) to PENDING.
The server reads the task data from the Modbus registers.
Server Task Execution:

The server detects the pending task (40005 = PENDING).
Calls the MissionWorks API to send a start command to the AMR.
Updates the Modbus register (40005) to RUNNING.

6.2 AMR Start/Stop Conditions
Start Task (Resume)
The PLC checks the following conditions before allowing the AMR to start or resume a task:

Battery Level (40006) is above 10%
Work Status (40007) = 1 (Idle)
Abnormal Status (40008) = 0 (Normal)
→ Action: Write 1 to 40001 (Start Task) and update 40005 to RUNNING.
Pause Task
Conditions where the AMR must pause:

Battery Level (40006) ≤ 10%
Abnormal Status (40008) ≠ 0 (Error detected)
→ Action: Write 2 to 40001 (Pause Task), update 40005 to PAUSED, and trigger a charge or recovery.
Charging Initiation
When the battery drops below 10%, the system automatically pauses the task and initiates charging:

Write 3 to 40001 (Charge Command)
Update 40005 to CHARGING
When the battery reaches ≥ 30%, the system resumes the last task:

Write 1 to 40001 (Resume Task)
Update 40005 to RUNNING

7. Sample PLC Code (C) for Modbus Communication
7.1 Reading and Writing Modbus Registers
The following C code demonstrates how the PLC interacts with Modbus registers.

----------C#--------------
#include <stdio.h>
#include <stdlib.h>
#include <modbus/modbus.h>
#include <unistd.h>

#define SERVER_IP "192.168.51.51"
#define SERVER_PORT 502

int main() {
    modbus_t *ctx;
    uint16_t regs[10];

    // Connect to Modbus Server (PLC)
    ctx = modbus_new_tcp(SERVER_IP, SERVER_PORT);
    if (modbus_connect(ctx) == -1) {
        fprintf(stderr, "Connection Failed: %s\n", modbus_strerror(errno));
        modbus_free(ctx);
        return -1;
    }

    while (1) {
        // Read AMR status registers
        if (modbus_read_registers(ctx, 5, 4, regs) == -1) {
            fprintf(stderr, "Failed to read registers: %s\n", modbus_strerror(errno));
        } else {
            int battery = regs[1];  // 40006: Battery Level
            int workStatus = regs[2];  // 40007: Work Status
            int abnormalStatus = regs[3];  // 40008: Abnormal Status

            printf("Battery: %d%%, Work Status: %d, Abnormal Status: %d\n", battery, workStatus, abnormalStatus);

            // Start Task if conditions are met
            if (battery > 10 && workStatus == 1 && abnormalStatus == 0) {
                printf("Starting Task...\n");
                uint16_t startCommand = 1;
                modbus_write_register(ctx, 0, startCommand); // 40001 = 1 (Start)
            }

            // Pause if Battery is Low
            if (battery <= 10) {
                printf("Battery Low! Pausing Task...\n");
                uint16_t pauseCommand = 2;
                modbus_write_register(ctx, 0, pauseCommand); // 40001 = 2 (Pause)
            }
        }
        sleep(5);  // Check every 5 seconds
    }

    modbus_close(ctx);
    modbus_free(ctx);
    return 0;
}
----------C#--------------

8. Summary
HMI → PLC:

HMI writes task commands (START, PAUSE, CHARGE) to Modbus registers.
PLC reads task data and updates the task_list database.
PLC → Server:

Server reads Modbus registers (40001-40008) to determine task execution status.
If a task is pending (40005 = PENDING), the server triggers the AMR via API.
PLC → AMR:

AMR status (battery, workStatus, abnormalStatus) is continuously monitored.
Based on conditions, the task is resumed, paused, or charging is initiated.